{"version":3,"sources":["transitions/errorSlide.module.css","transitions/pop.module.css","transitions/slide.module.css","redux/phonebook/phonebookActions.js","redux/phonebook/phoneSelectors.js","components/Notification/Notification.js","components/ContactForm/ErrorDuplicate.js","components/common/Input.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","components/Contact/Contact.js","components/Contact/ContactContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/App.js","redux/phonebook/phonebookReducers.js","redux/combineReducers.js","index.js"],"names":["module","exports","enter","enterActive","exit","exitActive","updateCollection","createAction","filterCollection","deleteUser","getContacts","state","phonebook","collection","getFilterValue","filter","getFilteredContacts","createSelector","contacts","filterValue","_ref","name","toLowerCase","includes","Notification","label","react_default","a","createElement","style","color","display","defaultProps","error","css","_templateObject","p","_templateObject2","ErrorDuplicate","Object","core_browser_esm","Input_templateObject","input","Input_templateObject2","Input","id","text","type","value","onChange","htmlFor","form","ContactForm_templateObject","button","ContactForm_templateObject2","rules","number","messages","name.required","number.required","ContactForm","errors","isDuplicate","handleDupName","_this","props","some","contact","handleSubmit","e","preventDefault","_this$state","setState","setTimeout","exitAnimation","uuidv4","data","validateAll","then","d","objectSpread","reset","catch","err","formattedErr","forEach","field","message","handleInput","_e$target","target","defineProperty","this","_this$state2","idName","idPhone","onSubmit","common_Input","components_Notification_Notification","CSSTransition","in","timeout","classNames","SlideTransition","unmountOnExit","ContactForm_ErrorDuplicate","Component","connect","dispatch","user","ACTIONS","item","Contact_templateObject","itemName","Contact_templateObject2","itemNumber","_templateObject3","_templateObject4","Contact","onClick","compose","list","ContactList_templateObject","lists","ContactList_templateObject2","ContactList","TransitionGroup","component","map","key","slideTransition","ContactContainer","Filter","inputFilter","Fragment","length","PopTransition","_ref2","App","_useState","useState","_useState2","slicedToArray","isShown","setShown","useEffect","ContactFormContainer","FilterContainer","ContactListContainer","collectionReducer","createReducer","_createReducer","TYPE","action","concat","toConsumableArray","payload","filterReducer","eventsPersistConfig","storage","whitelist","collectionReducers","combineReducers","rootReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","ReactDOM","render","es","integration_react","loading","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.3baf1f00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"errorSlide_enter__1tStT\",\"enterActive\":\"errorSlide_enterActive__9fKk5\",\"exit\":\"errorSlide_exit__15p7V\",\"exitActive\":\"errorSlide_exitActive__3y3Ou\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__3BREO\",\"enterActive\":\"pop_enterActive__3lC-x\",\"exit\":\"pop_exit__o-9_0\",\"exitActive\":\"pop_exitActive__1-hj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1x6UN\",\"enterActive\":\"slide_enterActive__1PoIU\",\"exit\":\"slide_exit__NwBHi\",\"exitActive\":\"slide_exitActive__35ND0\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const updateCollection = createAction('phonebook/COLLECTION_UPDATE');\nexport const filterCollection = createAction('phonebook/FILTER_COLLECTION');\nexport const deleteUser = createAction('phonebook/DELETE_USER');\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.phonebook.collection;\nexport const getFilterValue = state => state.phonebook.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilterValue],\n  (contacts, filterValue) =>\n    contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filterValue.toLowerCase()),\n    ),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ label }) => (\n  <span style={{ color: '#ff0000', display: 'inline-block' }}>{label}</span>\n);\n\nNotification.defaultProps = {\n  label: '',\n};\n\nNotification.propTypes = {\n  label: PropTypes.string,\n};\nexport default Notification;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst error = css`\n  width: 300px;\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  padding: 15px 20px;\n  background-color: red;\n  color: #fff;\n  border-radius: 5px;\n  font-weight: 700;\n`;\nconst p = css`\n  text-align: center;\n`;\n\nconst ErrorDuplicate = () => (\n  <div css={error}>\n    <p css={p}>Name is already in the list!</p>\n  </div>\n);\n\nexport default ErrorDuplicate;\n","import PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst label = css`\n  margin-bottom: 10px;\n  padding: 5px;\n`;\nconst input = css`\n  width: 100%;\n  padding: 10px 0 10px 5px;\n  border-radius: 5px;\n  border: 1px solid #dedede;\n  margin-top: 5px;\n  font-size: 16px;\n`;\n\nconst Input = ({ id, text, type, value, onChange, name }) => (\n  <label htmlFor={id} css={label}>\n    {text}\n    <input\n      type={type}\n      value={value}\n      name={name}\n      onChange={onChange}\n      id={id}\n      css={input}\n    />\n  </label>\n);\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Input;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { validateAll } from 'indicative/validator';\nimport { CSSTransition } from 'react-transition-group';\nimport Notification from '../Notification/Notification';\nimport ErrorDuplicate from './ErrorDuplicate';\nimport Input from '../common/Input';\nimport SlideTransition from '../../transitions/errorSlide.module.css';\n\n// css emotion\nconst form = css`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 3px 8px -2px rgba(0, 0, 0, 0.75);\n  border-radius: 5px;\n`;\nconst button = css`\n  width: 150px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 5px;\n  padding: 3px;\n  width: 100%;\n  background-color: #3944a8;\n  color: #fff;\n  padding: 10px 0;\n  font-weight: 700;\n`;\n\n// indicative\nconst rules = {\n  name: 'required|string',\n  number: 'required|string',\n};\n\nconst messages = {\n  'name.required': 'Please enter a unique name for your account',\n  'number.required': 'Enter a phone number.',\n};\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    updateCollection: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        number: PropTypes.string,\n        name: PropTypes.strings,\n      }),\n    ).isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    errors: null,\n    isDuplicate: false,\n  };\n\n  handleDupName = name => {\n    const { contacts } = this.props;\n    const isUnique = contacts.some(contact => contact.name === name);\n    return isUnique;\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    // recieve state name\n    const { name, number } = this.state;\n    // update parent state\n    const { updateCollection } = this.props;\n    // validate unique name\n    if (this.handleDupName(name)) {\n      // set animation\n      this.setState({ isDuplicate: true });\n      setTimeout(this.exitAnimation, 3000);\n      return;\n    }\n    // generate id\n    const id = uuidv4();\n    const data = {\n      name,\n      number,\n    };\n    // validation\n    validateAll(data, rules, messages)\n      .then(d => {\n        // render if validated\n        updateCollection([\n          {\n            ...d,\n            id,\n          },\n        ]);\n        // reset\n        this.reset();\n      })\n      .catch(err => {\n        // cat error and update state\n        const formattedErr = {};\n\n        err.forEach(error => {\n          formattedErr[error.field] = error.message;\n        });\n        this.setState({\n          errors: formattedErr,\n        });\n      });\n  };\n\n  exitAnimation = () => {\n    this.setState({ isDuplicate: false });\n  };\n\n  handleInput = e => {\n    const { value, name } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  reset() {\n    this.setState({\n      name: '',\n      number: '',\n      errors: null,\n      isDuplicate: false,\n    });\n  }\n\n  render() {\n    const { name, number, errors, isDuplicate } = this.state;\n    const idName = uuidv4();\n    const idPhone = uuidv4();\n\n    return (\n      <form onSubmit={this.handleSubmit} css={form}>\n        <Input\n          id={idName}\n          text=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleInput}\n        />\n        {errors && <Notification label={errors.name} />}\n        <Input\n          id={idPhone}\n          text=\"Number\"\n          type=\"number\"\n          name=\"number\"\n          value={number}\n          onChange={this.handleInput}\n        />\n        {errors && <Notification label={errors.number} />}\n        <button type=\"submit\" css={button}>\n          Add contact\n        </button>\n        <CSSTransition\n          in={isDuplicate}\n          timeout={300}\n          classNames={SlideTransition}\n          unmountOnExit\n        >\n          <ErrorDuplicate />\n        </CSSTransition>\n      </form>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport * as ACTIONS from '../../redux/phonebook/phonebookActions';\nimport { getContacts } from '../../redux/phonebook/phoneSelectors';\nimport ContactForm from './ContactForm';\n\n// redux\nconst mapStateToProps = state => {\n  return {\n    contacts: getContacts(state),\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateCollection: user => dispatch(ACTIONS.updateCollection(user)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from 'prop-types';\n\nconst item = css`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 8px;\n`;\n\nconst itemName = css`\n  flex-grow: 2;\n`;\nconst itemNumber = css`\n  flex-grow: 1;\n`;\n\nconst button = css`\n  padding: 4px;\n  max-width: 40px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 5px;\n  flex-grow: 1;\n  background-color: #ff0000;\n  color: #fff;\n  font-weight: 700;\n`;\n\nconst Contact = ({ contact, deleteUser }) => (\n  <div css={item}>\n    <p css={itemName}>{contact.name}</p>\n    <p css={itemNumber}>{contact.number}</p>\n    <button type=\"button\" onClick={() => deleteUser(contact.id)} css={button}>\n      ✕\n    </button>\n  </div>\n);\n\nContact.propTypes = {\n  deleteUser: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Contact;\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as ACTIONS from '../../redux/phonebook/phonebookActions';\nimport Contact from './Contact';\nimport withRender from '../hoc/withRender';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUser: name => dispatch(ACTIONS.deleteUser(name)),\n  };\n};\n\nexport default compose(connect(null, mapDispatchToProps))(Contact);\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport Contact from '../Contact/ContactContainer';\nimport slideTransition from '../../transitions/slide.module.css';\n\nconst list = css`\n  margin-top: 10px;\n  border: 1px solid #dedede;\n  border-radius: 5px;\n  box-shadow: 0px 3px 8px -2px rgba(0, 0, 0, 0.75);\n`;\nconst lists = css`\n  list-style-type: none;\n  padding: 0;\n`;\nconst ContactList = ({ contacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" css={lists}>\n      {contacts.map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={500}\n          classNames={slideTransition}\n        >\n          <li css={list}>\n            <Contact contact={contact} />\n          </li>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport * as ACTIONS from '../../redux/phonebook/phonebookActions';\nimport { getFilteredContacts } from '../../redux/phonebook/phoneSelectors';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getFilteredContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUser: name => dispatch(ACTIONS.deleteUser(name)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PopTransition from '../../transitions/pop.module.css';\nimport Input from '../common/Input';\n\nconst Filter = ({ inputFilter, filter, contacts }) => {\n  const getFIlterValue = ({ target }) => {\n    const { value } = target;\n    // redux\n    inputFilter(value);\n  };\n\n  return (\n    <>\n      <TransitionGroup>\n        {contacts.length > 1 && (\n          <CSSTransition timeout={300} classNames={PopTransition} unmountOnExit>\n            <div>\n              <Input\n                onChange={getFIlterValue}\n                value={filter}\n                type=\"text\"\n                text=\"Find contacts by name\"\n                id=\"filter\"\n                name=\"filter\"\n              />\n            </div>\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  inputFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      number: PropTypes.string,\n      name: PropTypes.strings,\n    }),\n  ).isRequired,\n};\n","import { connect } from 'react-redux';\nimport * as ACTIONS from '../../redux/phonebook/phonebookActions';\nimport {\n  getFilterValue,\n  getContacts,\n} from '../../redux/phonebook/phoneSelectors';\nimport Filter from './Filter';\n\n// redux\nconst mapStateToProps = state => {\n  return {\n    contacts: getContacts(state),\n    filter: getFilterValue(state),\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    inputFilter: input => dispatch(ACTIONS.filterCollection(input)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { useState, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport ContactForm from './ContactForm/ContactFormContainer';\nimport ContactList from './ContactList/ContactListContainer';\nimport Filter from './Filter/FilterContainer';\nimport slideTransition from '../transitions/slide.module.css';\n\nconst App = () => {\n  const [isShown, setShown] = useState(false);\n\n  useEffect(() => {\n    setShown(!isShown);\n  }, []);\n\n  return (\n    <>\n      <CSSTransition in={isShown} timeout={500} classNames={slideTransition}>\n        <h1>Phonebook</h1>\n      </CSSTransition>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport * as TYPE from './phonebookActions';\n\nexport const collectionReducer = createReducer([], {\n  [TYPE.updateCollection]: (state, action) => [...state, ...action.payload],\n  [TYPE.deleteUser]: (state, action) => [\n    ...state.filter(contact => contact.id !== action.payload),\n  ],\n});\n\nexport const filterReducer = createReducer('', {\n  [TYPE.filterCollection]: (state, action) => action.payload,\n});\n","import { combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport {\n  collectionReducer,\n  filterReducer,\n} from './phonebook/phonebookReducers';\n\nconst eventsPersistConfig = {\n  key: 'contacts',\n  storage,\n  whitelist: ['collection'],\n};\n\n// create store states inside phonebook store\nconst collectionReducers = combineReducers({\n  collection: collectionReducer,\n  filter: filterReducer,\n});\n\n// main store\nconst rootReducer = combineReducers({\n  phonebook: persistReducer(eventsPersistConfig, collectionReducers),\n});\n\n// create store\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport './styles/styles.css';\nimport { store, persistor } from './redux/combineReducers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}