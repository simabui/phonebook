{"version":3,"sources":["transitions/errorSlide.module.css","transitions/pop.module.css","transitions/slide.module.css","redux/phonebook/phonebookActions.js","redux/phonebook/phoneSelectors.js","components/Notification/Notification.js","components/ContactForm/ErrorDuplicate.js","components/ContactForm/Input.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","components/AppContainer.js","redux/phonebook/phonebookReducers.js","redux/combineReducers.js","index.js"],"names":["module","exports","enter","enterActive","exit","exitActive","updateCollection","createAction","filterCollection","deleteUser","getContacts","state","phonebook","collection","getFilterValue","filter","Notification","_ref","label","react_default","a","createElement","style","color","display","defaultProps","error","css","_templateObject","p","_templateObject2","ErrorDuplicate","Object","core_browser_esm","Input_templateObject","input","Input_templateObject2","Input","id","text","type","value","onChange","name","htmlFor","form","ContactForm_templateObject","button","ContactForm_templateObject2","rules","number","messages","name.required","number.required","ContactForm","errors","isDuplicate","handleSubmit","e","preventDefault","_this$state","_this","_this$props","props","handleContacts","onDuplicate","setState","setTimeout","exitAnimation","uuidv4","data","validateAll","then","d","objectSpread","reset","catch","err","formattedErr","forEach","field","message","handleInput","_e$target","target","defineProperty","this","_this$state2","idName","idPhone","onSubmit","ContactForm_Input","components_Notification_Notification","CSSTransition","in","timeout","classNames","SlideTransition","unmountOnExit","ContactForm_ErrorDuplicate","Component","item","ContactList_templateObject","itemName","ContactList_templateObject2","itemNumber","_templateObject3","_templateObject4","list","_templateObject5","lists","_templateObject6","ContactList","onDeleteContact","TransitionGroup","component","map","contact","key","slideTransition","onClick","Filter_templateObject","Filter","getFIlterValue","title","App_templateObject","App","isShown","inputFilter","handleFilter","filterValue","_ref2","toLowerCase","includes","deleteContact","handleDupName","contacts","some","contactsLocal","localStorage","getItem","JSON","parse","prevProp","strContacts","stringify","setItem","filteredPhoneBook","react","ContactForm_ContactForm","length","PopTransition","components_Filter_Filter","components_ContactList_ContactList","connect","dispatch","user","ACTIONS","collectionReducer","createReducer","_createReducer","TYPE","action","concat","toConsumableArray","payload","filterReducer","collectionReducers","combineReducers","rootReducer","store","configureStore","reducer","ReactDOM","render","es","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.eb121bbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"errorSlide_enter__1tStT\",\"enterActive\":\"errorSlide_enterActive__9fKk5\",\"exit\":\"errorSlide_exit__15p7V\",\"exitActive\":\"errorSlide_exitActive__3y3Ou\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__3BREO\",\"enterActive\":\"pop_enterActive__3lC-x\",\"exit\":\"pop_exit__o-9_0\",\"exitActive\":\"pop_exitActive__1-hj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1x6UN\",\"enterActive\":\"slide_enterActive__1PoIU\",\"exit\":\"slide_exit__NwBHi\",\"exitActive\":\"slide_exitActive__35ND0\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const updateCollection = createAction('COLLECTION_UPDATE');\nexport const filterCollection = createAction('FILTER_COLLECTION');\nexport const deleteUser = createAction('DELETE_USER');\n","export const getContacts = state => state.phonebook.collection;\nexport const getFilterValue = state => state.phonebook.filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ label }) => (\n  <span style={{ color: '#ff0000', display: 'inline-block' }}>{label}</span>\n);\n\nNotification.defaultProps = {\n  label: '',\n};\n\nNotification.propTypes = {\n  label: PropTypes.string,\n};\nexport default Notification;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst error = css`\n  width: 300px;\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  padding: 15px 20px;\n  background-color: red;\n  color: #fff;\n  border-radius: 5px;\n  font-weight: 700;\n`;\nconst p = css`\n  text-align: center;\n`;\n\nconst ErrorDuplicate = () => (\n  <div css={error}>\n    <p css={p}>Name is already in the list!</p>\n  </div>\n);\n\nexport default ErrorDuplicate;\n","import PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst label = css`\n  margin-bottom: 10px;\n  padding: 5px;\n`;\nconst input = css`\n  width: 100%;\n  padding: 10px 0 10px 5px;\n  border-radius: 5px;\n  border: 1px solid #dedede;\n  margin-top: 5px;\n  font-size: 16px;\n`;\n\nconst Input = ({ id, text, type, value, onChange, name }) => (\n  <label htmlFor={id} css={label}>\n    {text}\n    <input\n      type={type}\n      value={value}\n      name={name}\n      onChange={onChange}\n      id={id}\n      css={input}\n    />\n  </label>\n);\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Input;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { validateAll } from 'indicative/validator';\nimport { CSSTransition } from 'react-transition-group';\nimport Notification from '../Notification/Notification';\nimport ErrorDuplicate from './ErrorDuplicate';\nimport Input from './Input';\nimport SlideTransition from '../../transitions/errorSlide.module.css';\n\n// css emotion\nconst form = css`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 3px 8px -2px rgba(0, 0, 0, 0.75);\n  border-radius: 5px;\n`;\nconst button = css`\n  width: 150px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 5px;\n  padding: 3px;\n  width: 100%;\n  background-color: #3944a8;\n  color: #fff;\n  padding: 10px 0;\n  font-weight: 700;\n`;\n\n// indicative\nconst rules = {\n  name: 'required|string',\n  number: 'required|string',\n};\n\nconst messages = {\n  'name.required': 'Please enter a unique name for your account',\n  'number.required': 'Enter a phone number.',\n};\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    handleContacts: PropTypes.func.isRequired,\n    onDuplicate: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    errors: null,\n    isDuplicate: false,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    // recieve state name\n    const { name, number } = this.state;\n    // update parent state\n    const { handleContacts, onDuplicate } = this.props;\n    // validate unique name\n    if (onDuplicate(name)) {\n      // set animation\n      this.setState({ isDuplicate: true });\n      setTimeout(this.exitAnimation, 3000);\n      return;\n    }\n    // generate id\n    const id = uuidv4();\n    const data = {\n      name,\n      number,\n    };\n    // validation\n    validateAll(data, rules, messages)\n      .then(d => {\n        // render if validated\n        handleContacts([\n          {\n            ...d,\n            id,\n          },\n        ]);\n        // reset\n        this.reset();\n      })\n      .catch(err => {\n        // cat error and update state\n        const formattedErr = {};\n\n        err.forEach(error => {\n          formattedErr[error.field] = error.message;\n        });\n        this.setState({\n          errors: formattedErr,\n        });\n      });\n  };\n\n  exitAnimation = () => {\n    this.setState({ isDuplicate: false });\n  };\n\n  handleInput = e => {\n    const { value, name } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  reset() {\n    this.setState({\n      name: '',\n      number: '',\n      errors: null,\n      isDuplicate: false,\n    });\n  }\n\n  render() {\n    const { name, number, errors, isDuplicate } = this.state;\n    const idName = uuidv4();\n    const idPhone = uuidv4();\n\n    return (\n      <form onSubmit={this.handleSubmit} css={form}>\n        <Input\n          id={idName}\n          text=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleInput}\n        />\n        {errors && <Notification label={errors.name} />}\n        <Input\n          id={idPhone}\n          text=\"Number\"\n          type=\"number\"\n          name=\"number\"\n          value={number}\n          onChange={this.handleInput}\n        />\n        {errors && <Notification label={errors.number} />}\n        <button type=\"submit\" css={button}>\n          Add contact\n        </button>\n        <CSSTransition\n          in={isDuplicate}\n          timeout={300}\n          classNames={SlideTransition}\n          unmountOnExit\n        >\n          <ErrorDuplicate />\n        </CSSTransition>\n      </form>\n    );\n  }\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport slideTransition from '../../transitions/slide.module.css';\n\nconst item = css`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 8px;\n`;\n\nconst itemName = css`\n  flex-grow: 2;\n`;\nconst itemNumber = css`\n  flex-grow: 1;\n`;\n\nconst button = css`\n  padding: 4px;\n  max-width: 40px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 5px;\n  flex-grow: 1;\n  background-color: #ff0000;\n  color: #fff;\n  font-weight: 700;\n`;\nconst list = css`\n  margin-top: 10px;\n  border: 1px solid #dedede;\n  border-radius: 5px;\n  box-shadow: 0px 3px 8px -2px rgba(0, 0, 0, 0.75);\n`;\nconst lists = css`\n  list-style-type: none;\n  padding: 0;\n`;\nconst ContactList = ({ data, onDeleteContact }) => (\n  <TransitionGroup component=\"ul\" css={lists}>\n    {data.map(contact => (\n      <CSSTransition\n        key={contact.id}\n        timeout={500}\n        classNames={slideTransition}\n      >\n        <li css={list}>\n          <div css={item}>\n            <p css={itemName}>{contact.name}</p>\n            <p css={itemNumber}>{contact.number}</p>\n            <button\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n              css={button}\n            >\n              ✕\n            </button>\n          </div>\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nContactList.defaultProps = {\n  data: null,\n};\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from 'prop-types';\n\nconst input = css`\n  width: 100%;\n  padding: 10px 0 10px 5px;\n  border-radius: 5px;\n  border: 1px solid #dedede;\n  margin-top: 5px;\n  font-size: 16px;\n`;\nconst Filter = ({ getFIlterValue, value }) => (\n  <div>\n    <p>Find contacts by name</p>\n    <input type=\"text\" onChange={getFIlterValue} css={input} value={value} />\n  </div>\n);\n\nexport default Filter;\n\nFilter.propTypes = {\n  getFIlterValue: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport slideTransition from '../transitions/slide.module.css';\nimport PopTransition from '../transitions/pop.module.css';\n\nconst title = css`\n  color: #3944a8;\n`;\n\nclass App extends Component {\n  static propTypes = {\n    updateCollection: PropTypes.func.isRequired,\n    inputFilter: PropTypes.func.isRequired,\n    deleteUser: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        number: PropTypes.string,\n        name: PropTypes.strings,\n      }),\n    ).isRequired,\n    filter: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {};\n\n  state = {\n    isShown: false,\n  };\n  // render\n\n  componentDidMount() {\n    const contactsLocal = localStorage.getItem('contacts');\n    if (contactsLocal) {\n      // render from prop\n      const { updateCollection } = this.props;\n      updateCollection(JSON.parse(contactsLocal));\n    }\n    // animate title\n    this.setState(state => ({ isShown: !state.isShown }));\n  }\n\n  componentDidUpdate(prevProp) {\n    // update local\n    const { contacts } = this.props;\n    if (prevProp.contacts !== contacts) {\n      const strContacts = JSON.stringify(contacts);\n      localStorage.setItem('contacts', strContacts);\n    }\n  }\n\n  getFIlterValue = ({ target }) => {\n    const { value } = target;\n    // redux\n    const { inputFilter } = this.props;\n    inputFilter(value);\n  };\n\n  // filter by search\n  handleFilter = (collection, filterValue) => {\n    return collection.filter(({ name }) =>\n      name.toLowerCase().includes(filterValue.toLowerCase()),\n    );\n  };\n\n  deleteContact = id => {\n    // redux\n    const { deleteUser } = this.props;\n    deleteUser(id);\n  };\n\n  // check if unique name in collection\n  handleDupName = name => {\n    const { contacts } = this.props;\n    const isUnique = contacts.some(contact => contact.name === name);\n    return isUnique;\n  };\n\n  render() {\n    const { isShown } = this.state;\n    const { updateCollection, contacts, filter } = this.props;\n    const filteredPhoneBook = this.handleFilter(contacts, filter);\n    return (\n      <Fragment>\n        <CSSTransition in={isShown} timeout={500} classNames={slideTransition}>\n          <h1 css={title}>Phonebook</h1>\n        </CSSTransition>\n        <ContactForm\n          // handleContacts={this.handleContacts}\n          handleContacts={updateCollection}\n          onDuplicate={this.handleDupName}\n        />\n        <h2>Contacts</h2>\n        <TransitionGroup>\n          {contacts && contacts.length > 1 ? (\n            <CSSTransition timeout={300} classNames={PopTransition}>\n              <Filter getFIlterValue={this.getFIlterValue} value={filter} />\n            </CSSTransition>\n          ) : null}\n        </TransitionGroup>\n\n        <ContactList\n          data={filteredPhoneBook}\n          onDeleteContact={this.deleteContact}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport * as ACTIONS from '../redux/phonebook/phonebookActions';\nimport { getFilterValue, getContacts } from '../redux/phonebook/phoneSelectors';\nimport App from './App';\n\n// redux\nconst mapStateToProps = state => {\n  return {\n    contacts: getContacts(state),\n    filter: getFilterValue(state),\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateCollection: user => dispatch(ACTIONS.updateCollection(user)),\n    inputFilter: input => dispatch(ACTIONS.filterCollection(input)),\n    deleteUser: name => dispatch(ACTIONS.deleteUser(name)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport * as TYPE from './phonebookActions';\n\nexport const collectionReducer = createReducer([], {\n  [TYPE.updateCollection]: (state, action) => [...state, ...action.payload],\n  [TYPE.deleteUser]: (state, action) => [\n    ...state.filter(contact => contact.id !== action.payload),\n  ],\n});\n\nexport const filterReducer = createReducer('', {\n  [TYPE.filterCollection]: (state, action) => action.payload,\n});\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport {\n  collectionReducer,\n  filterReducer,\n} from './phonebook/phonebookReducers';\n\n// create store states inside phonebook store\nconst collectionReducers = combineReducers({\n  collection: collectionReducer,\n  filter: filterReducer,\n});\n\n// main store\nconst rootReducer = combineReducers({\n  phonebook: collectionReducers,\n});\n\n// create store\nconst store = configureStore({ reducer: rootReducer });\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/AppContainer';\nimport './styles/styles.css';\nimport store from './redux/combineReducers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}