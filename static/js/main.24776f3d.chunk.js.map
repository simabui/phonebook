{"version":3,"sources":["transitions/errorSlide.module.css","transitions/pop.module.css","transitions/slide.module.css","components/Notification/Notification.js","components/ContactForm/ErrorDuplicate.js","components/ContactForm/Input.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js"],"names":["module","exports","enter","enterActive","exit","exitActive","Notification","_ref","label","react_default","a","createElement","style","color","display","defaultProps","error","css","_templateObject","p","_templateObject2","ErrorDuplicate","Object","core_browser_esm","Input_templateObject","input","Input_templateObject2","Input","id","text","type","value","onChange","name","htmlFor","form","ContactForm_templateObject","button","ContactForm_templateObject2","rules","number","messages","name.required","number.required","ContactForm","state","errors","isDuplicate","handleSubmit","e","preventDefault","_this$state","_this","_this$props","props","handleContacts","onDuplicate","setState","setTimeout","exitAnimation","uuidv4","data","validateAll","then","d","objectSpread","reset","catch","err","formattedErr","forEach","field","message","handleInput","_e$target","target","defineProperty","this","_this$state2","idName","idPhone","onSubmit","ContactForm_Input","components_Notification_Notification","CSSTransition","in","timeout","classNames","SlideTransition","unmountOnExit","ContactForm_ErrorDuplicate","Component","item","ContactList_templateObject","itemName","ContactList_templateObject2","itemNumber","_templateObject3","_templateObject4","list","_templateObject5","lists","_templateObject6","ContactList","onDeleteContact","TransitionGroup","component","map","contact","key","slideTransition","onClick","Filter_templateObject","Filter","getFIlterValue","title","App_templateObject","App","contacts","filter","isShown","handleFilter","collection","filterValue","_ref2","toLowerCase","includes","obj","concat","toConsumableArray","deleteContact","handleDupName","some","contactsLocal","localStorage","getItem","JSON","parse","prevProp","prevState","strContacts","stringify","setItem","filteredPhoneBook","react","ContactForm_ContactForm","length","PopTransition","components_Filter_Filter","components_ContactList_ContactList","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.24776f3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"errorSlide_enter__2rTZ2\",\"enterActive\":\"errorSlide_enterActive__FkO5G\",\"exit\":\"errorSlide_exit__3h2pD\",\"exitActive\":\"errorSlide_exitActive__1SyVU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__33wxo\",\"enterActive\":\"pop_enterActive__2QwFd\",\"exit\":\"pop_exit__1S3Ug\",\"exitActive\":\"pop_exitActive__355Ad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__35ayi\",\"enterActive\":\"slide_enterActive__21i_o\",\"exit\":\"slide_exit__2-aDW\",\"exitActive\":\"slide_exitActive__OSFEv\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ label }) => (\n  <span style={{ color: '#ff0000', display: 'inline-block' }}>{label}</span>\n);\n\nNotification.defaultProps = {\n  label: '',\n};\n\nNotification.propTypes = {\n  label: PropTypes.string,\n};\nexport default Notification;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst error = css`\n  width: 300px;\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  padding: 15px 20px;\n  background-color: red;\n  color: #fff;\n  border-radius: 5px;\n  font-weight: 700;\n`;\nconst p = css`\n  text-align: center;\n`;\n\nconst ErrorDuplicate = () => (\n  <div css={error}>\n    <p css={p}>Name is already in the list!</p>\n  </div>\n);\n\nexport default ErrorDuplicate;\n","import PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst label = css`\n  margin-bottom: 10px;\n  padding: 5px;\n`;\nconst input = css`\n  width: 100%;\n  padding: 10px 0 10px 5px;\n  border-radius: 5px;\n  border: 1px solid #dedede;\n  margin-top: 5px;\n  font-size: 16px;\n`;\n\nconst Input = ({ id, text, type, value, onChange, name }) => (\n  <label htmlFor={id} css={label}>\n    {text}\n    <input\n      type={type}\n      value={value}\n      name={name}\n      onChange={onChange}\n      id={id}\n      css={input}\n    />\n  </label>\n);\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Input;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { validateAll } from 'indicative/validator';\nimport { CSSTransition } from 'react-transition-group';\nimport Notification from '../Notification/Notification';\nimport ErrorDuplicate from './ErrorDuplicate';\nimport SlideTransition from '../../transitions/errorSlide.module.css';\nimport Input from './Input';\n\n// css emotion\nconst form = css`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 3px 8px -2px rgba(0, 0, 0, 0.75);\n  border-radius: 5px;\n`;\nconst button = css`\n  width: 150px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 5px;\n  padding: 3px;\n  width: 100%;\n  background-color: #3944a8;\n  color: #fff;\n  padding: 10px 0;\n  font-weight: 700;\n`;\n\n// indicative\nconst rules = {\n  name: 'required|string',\n  number: 'required|string',\n};\n\nconst messages = {\n  'name.required': 'Please enter a unique name for your account',\n  'number.required': 'Enter a phone number.',\n};\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    handleContacts: PropTypes.func.isRequired,\n    onDuplicate: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    errors: null,\n    isDuplicate: false,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    // recieve state name\n    const { name, number } = this.state;\n    // update parent state\n    const { handleContacts, onDuplicate } = this.props;\n    // validate unique name\n    if (onDuplicate(name)) {\n      // set animation\n      this.setState({ isDuplicate: true });\n      setTimeout(this.exitAnimation, 3000);\n      return;\n    }\n    // generate id\n    const id = uuidv4();\n    const data = {\n      name,\n      number,\n    };\n    // validation\n    validateAll(data, rules, messages)\n      .then(d => {\n        // render if validated\n        handleContacts({\n          ...d,\n          id,\n        });\n        // reset\n        this.reset();\n      })\n      .catch(err => {\n        // cat error and update state\n        const formattedErr = {};\n\n        err.forEach(error => {\n          formattedErr[error.field] = error.message;\n        });\n        this.setState({\n          errors: formattedErr,\n        });\n      });\n  };\n\n  exitAnimation = () => {\n    this.setState({ isDuplicate: false });\n  };\n\n  handleInput = e => {\n    const { value, name } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  reset() {\n    this.setState({\n      name: '',\n      number: '',\n      errors: null,\n      isDuplicate: false,\n    });\n  }\n\n  render() {\n    const { name, number, errors, isDuplicate } = this.state;\n    const idName = uuidv4();\n    const idPhone = uuidv4();\n\n    return (\n      <form onSubmit={this.handleSubmit} css={form}>\n        <Input\n          id={idName}\n          text=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleInput}\n        />\n        {errors && <Notification label={errors.name} />}\n        <Input\n          id={idPhone}\n          text=\"Number\"\n          type=\"number\"\n          name=\"number\"\n          value={number}\n          onChange={this.handleInput}\n        />\n\n        {errors && <Notification label={errors.number} />}\n        <button type=\"submit\" css={button}>\n          Add contact\n        </button>\n        <CSSTransition\n          in={isDuplicate}\n          timeout={300}\n          classNames={SlideTransition}\n          unmountOnExit\n        >\n          <ErrorDuplicate />\n        </CSSTransition>\n      </form>\n    );\n  }\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport slideTransition from '../../transitions/slide.module.css';\n\nconst item = css`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 8px;\n`;\n\nconst itemName = css`\n  flex-grow: 2;\n`;\nconst itemNumber = css`\n  flex-grow: 1;\n`;\n\nconst button = css`\n  padding: 4px;\n  max-width: 40px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 5px;\n  flex-grow: 1;\n  background-color: #ff0000;\n  color: #fff;\n  font-weight: 700;\n`;\nconst list = css`\n  margin-top: 10px;\n  border: 1px solid #dedede;\n  border-radius: 5px;\n  box-shadow: 0px 3px 8px -2px rgba(0, 0, 0, 0.75);\n`;\nconst lists = css`\n  list-style-type: none;\n  padding: 0;\n`;\nconst ContactList = ({ data, onDeleteContact }) => (\n  <TransitionGroup component=\"ul\" css={lists}>\n    {data.map(contact => (\n      <CSSTransition\n        key={contact.id}\n        timeout={500}\n        classNames={slideTransition}\n      >\n        <li css={list}>\n          <div css={item}>\n            <p css={itemName}>{contact.name}</p>\n            <p css={itemNumber}>{contact.number}</p>\n            <button\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n              css={button}\n            >\n              ✕\n            </button>\n          </div>\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nContactList.defaultProps = {\n  data: null,\n};\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from 'prop-types';\n\nconst input = css`\n  width: 100%;\n  padding: 10px 0 10px 5px;\n  border-radius: 5px;\n  border: 1px solid #dedede;\n  margin-top: 5px;\n  font-size: 16px;\n`;\nconst Filter = ({ getFIlterValue, value }) => (\n  <div>\n    <p>Find contacts by name</p>\n    <input type=\"text\" onChange={getFIlterValue} css={input} value={value} />\n  </div>\n);\n\nexport default Filter;\n\nFilter.propTypes = {\n  getFIlterValue: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { Component, Fragment } from 'react';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport slideTransition from '../transitions/slide.module.css';\nimport PopTransition from '../transitions/pop.module.css';\n\nconst title = css`\n  color: #3944a8;\n`;\n\nclass App extends Component {\n  static propTypes = {};\n\n  static defaultProps = {};\n\n  state = {\n    contacts: [],\n    filter: '',\n    isShown: false,\n  };\n  // render\n\n  componentDidMount() {\n    const contactsLocal = localStorage.getItem('contacts');\n    if (contactsLocal) {\n      this.setState({\n        contacts: [...JSON.parse(contactsLocal)],\n      });\n    }\n    // animate title\n    this.setState(state => ({ isShown: !state.isShown }));\n  }\n\n  componentDidUpdate(prevProp, prevState) {\n    // update local\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      const strContacts = JSON.stringify(contacts);\n      localStorage.setItem('contacts', strContacts);\n    }\n  }\n\n  getFIlterValue = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      filter: value,\n    });\n  };\n\n  // filter by search\n  handleFilter = (collection, filterValue) => {\n    return collection.filter(({ name }) =>\n      name.toLowerCase().includes(filterValue.toLowerCase()),\n    );\n  };\n\n  handleContacts = obj => {\n    this.setState(state => {\n      return {\n        // update contact list\n        contacts: [...state.contacts, obj],\n      };\n    });\n  };\n\n  deleteContact = id => {\n    this.setState(state => {\n      return {\n        contacts: state.contacts.filter(contact => contact.id !== id),\n      };\n    });\n  };\n\n  // check if unique name in collection\n\n  handleDupName = name => {\n    const { contacts } = this.state;\n    const isUnique = contacts.some(contact => contact.name === name);\n    return isUnique;\n  };\n\n  render() {\n    const { contacts, filter, isShown } = this.state;\n    const filteredPhoneBook = this.handleFilter(contacts, filter);\n\n    return (\n      <Fragment>\n        <CSSTransition in={isShown} timeout={500} classNames={slideTransition}>\n          <h1 css={title}>Phonebook</h1>\n        </CSSTransition>\n        <ContactForm\n          handleContacts={this.handleContacts}\n          onDuplicate={this.handleDupName}\n        />\n        <h2>Contacts</h2>\n        <TransitionGroup>\n          {contacts.length > 1 && (\n            <CSSTransition timeout={300} classNames={PopTransition}>\n              <Filter getFIlterValue={this.getFIlterValue} value={filter} />\n            </CSSTransition>\n          )}\n        </TransitionGroup>\n\n        <ContactList\n          data={filteredPhoneBook}\n          onDeleteContact={this.deleteContact}\n        />\n      </Fragment>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}